
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import networkx as nx
import plotly.graph_objects as go
import streamlit as st
from itertools import combinations
from collections import defaultdict
import xlsxwriter
from io import BytesIO
import operator
from typing import Annotated, List, TypedDict
from langchain_core.prompts import ChatPromptTemplate
from langchain_openai import ChatOpenAI
from langchain.chains import MapReduceDocumentsChain, ReduceDocumentsChain
from langchain.chains.combine_documents.stuff import StuffDocumentsChain
from langchain.chains.llm import LLMChain
from langchain.prompts import PromptTemplate

if "authenticated" not in st.session_state or not st.session_state.authenticated:
    st.error("‚õî Acc√®s refus√©. Veuillez vous authentifier sur la page Presentation.")
    st.stop()  # Arr√™te l'ex√©cution du script ici

# === Charger les donn√©es ===
@st.cache_data
def load_bpd_data_exploded():
    return pd.read_csv("data/bpd_exploded.csv")

@st.cache_data
def load_bpd_data():
    return pd.read_csv("data/bpd.csv")

bpd = load_bpd_data()
bpd_analytics = load_bpd_data_exploded()

# Sidebar filter for groupe selection
selected_groupe = st.sidebar.multiselect(
    "Filtre par groupe:",
    options=["All"] + sorted(bpd["Groupe"].unique()), 
    default=["All"]
)

# Sidebar filter for entity selection
selected_entities = st.sidebar.multiselect(
    "Filtre par entit√©:",
    options=["All"] + sorted(bpd_analytics["Entity"].unique()), 
    default=["All"]
)

# Sidebar filter for entity selection
selected_bpd = st.sidebar.multiselect(
    "Filtre par banque publique de d√©veloppement & autres:",
    options=["All"] + sorted(bpd_analytics["BPD Names"].unique()), 
    default=["All"]
)

# Initialiser le DataFrame filtr√©

# Filtrer par groupe
if "All" not in selected_groupe:
    bpd = bpd[bpd["Groupe"].isin(selected_groupe)]
    bpd_analytics = bpd_analytics[bpd_analytics["Groupe"].isin(selected_groupe)]

# Filtrer par entit√©
if "All" not in selected_entities:
    bpd = bpd[bpd["Entity"].isin(selected_entities)]
    bpd_analytics = bpd_analytics[bpd_analytics["Entity"].isin(selected_groupe)]

# Filtrer par entit√©
if "All" not in selected_bpd:
    bpd_analytics = bpd_analytics[bpd_analytics["BPD Names"].isin(selected_bpd)]

# Filtrer par banque publique de d√©veloppement
if "All" not in selected_bpd:
    def filter_bpd(cell):
        """
        V√©rifie si au moins une des BPD s√©lectionn√©es est pr√©sente dans la cellule.
        """
        if pd.isna(cell):  # G√©rer les valeurs NaN
            return False
        cell_bpd = [name.strip() for name in cell.split(",")]
        return any(bpd in cell_bpd for bpd in selected_bpd)
    
    bpd = bpd[bpd["BPD Names"].apply(filter_bpd)]


if bpd.empty:
    st.warning("Aucun r√©sultat trouv√© pour les filtres s√©lectionn√©s.")

# Afficher les donn√©es filtr√©es dans Streamlit
st.sidebar.write(f"Nombre de lignes apr√®s filtrage : {len(bpd)}")


# === Configuration du mod√®le OpenAI ===
@st.cache_resource
def load_model():
  return ChatOpenAI(model="gpt-4o-mini", temperature=0, openai_api_key=st.secrets["openai_api_key"])

llm = load_model()

# === D√©finir les cha√Ænes Map et Reduce ===
# Prompt pour l'√©tape Map (r√©sum√© par BPD)
map_template = "Write a concise summary of the following: {context}."
map_prompt = ChatPromptTemplate([("human", map_template)])
map_chain = LLMChain(llm=llm, prompt=map_prompt)

# Prompt pour l'√©tape Reduce (r√©sum√© global)
reduce_template = """
The following is a set of summaries:
{docs}
Take these and distill it into a final, consolidated summary
of the main themes.
"""
reduce_prompt = ChatPromptTemplate([("human", reduce_template)])
reduce_chain = LLMChain(llm=llm, prompt=reduce_prompt)

# === Initialiser les donn√©es de session ===
if "summaries" not in st.session_state:
    st.session_state["summaries"] = None  # Pour stocker les r√©sum√©s par BPD
if "global_summary" not in st.session_state:
    st.session_state["global_summary"] = None  # Pour stocker le r√©sum√© global


# === Calculs ===

# 1. Pourcentage des BPD  
top_bpd = (
    bpd_analytics.groupby(["BPD Names"])
    .size()
    .reset_index(name="Counts")
    .sort_values(by="Counts", ascending=False)
)

top_10_bpd_names = (
    top_bpd.groupby("BPD Names")["Counts"]
    .sum()
    .nlargest(10)
    .index
)
top_bpd["Pourcentage"] = top_bpd["Counts"].transform(lambda x: (x / x.sum()) * 100)
top_bpd_filtered = top_bpd[top_bpd["BPD Names"].isin(top_10_bpd_names)]
top_bpd_filtered.reset_index(drop=True, inplace=True)
top_bpd_filtered.sort_values(by="Pourcentage", ascending=False, inplace=True)
top_bpd_filtered["BPD Names"] = top_bpd_filtered.reset_index().apply(
    lambda row: f"{row.name} - {row['BPD Names']}",
    axis=1
)

# 2. Pourcentage des BPD par groupe
top_bpd = (
    bpd_analytics.groupby(["BPD Names", "Groupe"])
    .size()
    .reset_index(name="Counts")
    .sort_values(by="Counts", ascending=False)
)

top_10_bpd_names = (
    top_bpd.groupby("BPD Names")["Counts"]
    .sum()
    .nlargest(10)
    .index
)

top_bpd_filtered_group = top_bpd[top_bpd["BPD Names"].isin(top_10_bpd_names)]
top_bpd_filtered_group["Pourcentage"] = top_bpd_filtered_group.groupby("Groupe")["Counts"].transform(lambda x: (x / x.sum()) * 100)
top_bpd_filtered_group.reset_index(drop=True, inplace=True)
top_bpd_filtered_group.sort_values(by="Pourcentage", ascending=False, inplace=True)


# === Visualisations ===
st.title("üìä Analyse des Banques Publiques de D√©veloppements (BPD)")
st.markdown("---")
# === Cr√©ation des onglets ===
tab1, tab2, tab3 = st.tabs(["Visualisation", "R√©sum√©", "Table"])

# === Onglet 1: Visualisation ===
with tab1:
  row1 = st.columns(2)
  row2 = st.columns(2)

  # Graphique 1 : Pourcentage des BPD par num√©ro
  with row1[0]:
      st.subheader("R√©partition des top 10 BPDs")
      st.bar_chart(top_bpd_filtered, x='BPD Names', y='Pourcentage', use_container_width=True,x_label="BPD Names",horizontal = True)

  # Graphique 2 : Pourcentage des BPD par Groupe et num√©ro
  with row1[1]:
      st.subheader("R√©partition des top 10 BPDs par Groupe")
      st.bar_chart(
          top_bpd_filtered_group, 
          x='BPD Names', 
          y='Pourcentage', 
          use_container_width=True, 
          color='Groupe', 
          x_label="BPD Names"
      )


# === Streamlit Tab for Summarization ===
with tab2:
    st.markdown("## üìã R√©sum√© des Analyses des BPDs")
    
    # Pr√©paration du texte pour le contexte
    context = []
    for _, row in bpd.iterrows():
        context.append(f"R√¥le des Banques Publiques de D√©veloppement dans le fichier {row['Entity']} :\n{row['Role Summary']}\n\n")
    
    # Concat√©ner les textes pour former le contexte global
    concatenated_context = "\n".join(context)
    
    # Bouton pour g√©n√©rer le r√©sum√©
    if st.button("G√©n√©rer le r√©sum√©"):
        # R√©initialiser les r√©sum√©s dans la session state
        st.session_state["summaries"] = None
        st.session_state["global_summary"] = None

        # G√©n√©rer le r√©sum√© global √† partir du contexte
        def generate_global_summary(context_text):
            """
            Produit un r√©sum√© global du contexte donn√©.
            """
            return reduce_chain.run({"docs": context_text})

        # G√©n√©rer le r√©sum√© global
        st.session_state["global_summary"] = generate_global_summary(concatenated_context)

    # Afficher le r√©sum√© global
    if st.session_state["global_summary"] is not None:
        st.subheader("R√©sum√© global")
        st.write(st.session_state["global_summary"])
    else:
        st.info("Cliquez sur le bouton pour g√©n√©rer le r√©sum√©.")


with tab3:
    st.subheader("Donn√©es brutes")
    
    # Pr√©paration des donn√©es brutes pour l'affichage et le t√©l√©chargement
    bpd.reset_index(drop=True, inplace=True)

    st.table(bpd)
